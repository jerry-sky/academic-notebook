#!/usr/bin/python3
from sys import argv

BASE64_ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+="


def encode(input_: str) -> str:
    """Encode input into a base64 string."""

    # make sure we're reading bytes
    input = input_.encode()

    output = ""
    # bits count offset generated by previous bytes readings
    offset = 0
    i = 0
    while i < len(input):
        # the 6bit character to write to the output string
        c = 0
        # currently processed 8 bit character
        curr = input[i]
        # preceding 8 bit character
        prev = input[i - 1]
        if offset == 0:
            # take the first 6 bits from the 8 bit character
            c = curr >> 2
            offset = 6
        elif offset == 6:
            # take the last 2 bits from the previous character
            c1 = prev & 3
            # take the first 4 bits from the current character
            c2 = curr >> 4
            # merge these two parts into one
            c = (c1 * (2 ** 4)) + c2
            offset = 4
        elif offset == 4:
            # take the last 4 bits from the previous character
            c1 = prev & 15
            # take the first 2 bits from the current character
            c2 = curr >> 6
            c = (c1 * (2 ** 2)) + c2
            offset = 2
        elif offset == 2:
            # take the last 6 bits
            c = prev & 63
            # as 8 > 6 the counter is behind and needs to be rerolled
            # after a sequence of 3 consecutive 8 bit characters
            # @brief 24 / 8 = 3; 24 / 6 = 3
            i -= 1
            offset = 0
        i += 1
        output += BASE64_ALPHABET[c]

    # handle the leftovers
    c = input[-1]
    padding = ""
    if offset == 2:
        # take the last 6 bits
        c &= 63
    elif offset == 4:
        # take the last 4 bits
        c &= 15
        c *= 2 ** 2
        padding = "="
    elif offset == 6:
        # take the last 2 bits
        c &= 3
        c *= 2 ** 4
        padding = "=="
    output += BASE64_ALPHABET[c] + padding

    return output


def decode(input: str) -> str:
    """Decode input base64 string to its original form (in raw bytes).
    """
    output = ""
    # bits count offset generated by previous bytes readings
    offset = 0
    i = 0
    # partly assembled 8 bit character
    # it will be added to `output` if it contains 8 bits
    tmp = 0
    while i < len(input):
        curr = input[i]
        if curr == "=":
            # ignore the padding
            break
        # convert base64 character to an integer
        c = BASE64_ALPHABET.index(curr)
        if offset == 0:
            # take the whole 6 bits
            tmp += c
            tmp *= 2 ** 2
            offset = 6
        elif offset == 6:
            # take first 2 bits
            tmp += c >> 4
            # enough bits to put into output
            output += chr(tmp)
            # take last 4 bits
            tmp = c & 15
            tmp *= 2 ** 4
            offset = 4
        elif offset == 4:
            # take first 4 bits
            tmp += c >> 2
            output += chr(tmp)
            # take last 2 bits
            tmp = c & 3
            tmp *= 2 ** 6
            offset = 2
        elif offset == 2:
            # take the whole 6 bits
            tmp += c
            output += chr(tmp)
            tmp = 0
            offset = 0
        i += 1

    return output


def main(mode: str, input_file_path: str, output_file_path: str) -> None:
    """Either encodes or decodes provided file to or from base64 form.

    Transforms the content of a file from bytes to an array of 6 bit
    characters written using base64 ASCII alphabet. It can also decode
    such array of 6 bit characters back into the original form.

    Args:
        `mode`: Choose either `--encode` or `--decode` to transform the
            provided file accordingly.
        `input_file_path`: Path to the file to transform.
        `output_file_path`: Path to the output file.

    """

    if mode == "--encode":
        with open(input_file_path) as file:
            contents = file.read()
            encoded = encode(contents)
            with open(output_file_path, "w+") as file:
                file.write(encoded)

    elif mode == "--decode":
        with open(input_file_path) as file:
            contents = file.read()
            decoded = decode(contents)
            with open(output_file_path, "w+") as file:
                file.write(decoded)


if __name__ == "__main__":
    if len(argv) > 3:
        main(argv[1], argv[2], argv[3])
    else:
        print("usage: ./ex-2.py --encode|--decode <input_file> <output_file>")
