{"mappings":"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","sources":["./types.ts","./ex-2/shaders.ts","./ex-2/fractal-generator.ts","./ex-2/main.ts","./ex-2/canvas.ts"],"sourcesContent":["\nexport class Point3D {\n\n    constructor(\n        public x: number,\n        public y: number,\n        public z: number\n    ) { }\n\n    public static from(p: Point3D): Point3D {\n        return new Point3D(p.x, p.y, p.z)\n    }\n\n    public reset(p?: Point3D) {\n        this.x = p?.x || 0\n        this.y = p?.y || 0\n        this.z = p?.z || 0\n    }\n\n    public negate() {\n        this.x = -this.x\n        this.y = -this.y\n        this.z = -this.z\n    }\n\n    public translate(vector: Point3D) {\n        this.x += vector.x\n        this.y += vector.y\n        this.z += vector.z\n    }\n\n    public translateY(value: number) {\n        this.y += value\n    }\n\n    public scale(factor: number) {\n        this.x *= factor\n        this.y *= factor\n        this.z *= factor\n    }\n\n    /**\n     * Rotate the point around (0,0,0)\n     * looking top-down on the XY plane.\n     *\n     * The unit of the `angle` argument is degrees.\n     */\n    public rotateXY(angle: number) {\n        const sin = Math.sin(angle / 180 * Math.PI)\n        const cos = Math.cos(angle / 180 * Math.PI)\n        const newX = this.x * cos - this.y * sin\n        const newY = this.x * sin + this.y * cos\n        this.x = newX\n        this.y = newY\n    }\n\n}\n\nexport class ListOfPoint3D extends Array<Point3D> {\n\n    constructor(points?: Point3D[]) {\n        if (points)\n            super(...points)\n        else\n            super(0)\n    }\n\n    public static concatenate(...list: ListOfPoint3D[]) {\n        return new ListOfPoint3D([].concat(...list))\n    }\n\n    public get flatList() {\n\n        const flat = new Array<number>()\n\n        this.forEach((vertex) => {\n            flat.push(vertex.x)\n            flat.push(vertex.y)\n            flat.push(vertex.z)\n        });\n\n        return flat\n\n    }\n\n    public reset(p?: Point3D) {\n        const origin = Point3D.from(this[0])\n        origin.negate()\n        origin.translate(p)\n        this.forEach((vertex) => {\n            vertex.translate(origin)\n        })\n    }\n\n    public translate(vector: Point3D) {\n        this.forEach((vertex) => {\n            vertex.translate(vector)\n        })\n    }\n\n    public translateY(value: number) {\n        this.forEach((vertex) => {\n            vertex.translateY(value)\n        })\n    }\n\n    public scale(factor: number) {\n        this.forEach((vertex) => {\n            vertex.scale(factor)\n        })\n    }\n\n    /**\n     * Rotate by some amount given in degrees.\n     */\n    public rotateXY(angle: number) {\n        this.forEach((vertex) => {\n            vertex.rotateXY(angle)\n        })\n    }\n}\n","\nexport const vertexShaderRaw = {\n    source: `\nprecision mediump float;\n\nattribute vec3 vertPosition;\n\nvoid main()\n{\n    gl_Position = vec4(vertPosition, 1.0);\n    gl_PointSize = 10.0;\n}\n`,\n    attributes: {\n        vertPosition: 'vertPosition',\n    },\n}\n\nexport const fragmentShaderRaw = {\n    source: `\nprecision mediump float;\n\nuniform vec3 fragColour;\n\nvoid main()\n{\n    gl_FragColor = vec4(fragColour, 1.0);\n}\n`,\n    attributes: {},\n    uniforms: {\n        colour: 'fragColour',\n    },\n}\n","import { ListOfPoint3D, Point3D } from '../types'\n\nfunction kochEdge(level: number, z: number): ListOfPoint3D {\n    if (level === 1) {\n        return new ListOfPoint3D([\n            new Point3D(-1, 0, z),\n            new Point3D(-1 / 3, 0, z),\n            new Point3D(0, Math.sqrt(3) / 3, z),\n            new Point3D(1 / 3, 0, z),\n            new Point3D(1, 0, z),\n        ])\n    } else {\n        const first = kochEdge(level - 1, z)\n        first.scale(1 / 3)\n        first.translate(new Point3D(-2 / 3, 0, 0))\n        const second = kochEdge(level - 1, z)\n        second.translate(new Point3D(1, 0, 0))\n        second.rotateXY(60)\n        second.translate(new Point3D(-1, 0, 0))\n        second.scale(1 / 3)\n        const third = kochEdge(level - 1, z)\n        third.translate(new Point3D(1, 0, 0))\n        third.rotateXY(-60)\n        third.translate(new Point3D(0, Math.sqrt(3), 0))\n        third.scale(1 / 3)\n        // third.rotateXY(-60)\n        const fourth = kochEdge(level - 1, z)\n        fourth.translate(new Point3D(2, 0, 0))\n        fourth.scale(1 / 3)\n        return ListOfPoint3D.concatenate(\n            first,\n            second,\n            third,\n            fourth\n        )\n    }\n}\n\n\nexport function GenerateKoch(level: number, z: number) {\n\n    const one = kochEdge(level, z)\n    one.translate(new Point3D(0, 1, 0))\n    const two = kochEdge(level, z)\n    two.translate(new Point3D(1, 0, 0))\n    two.rotateXY(-120)\n    two.translate(new Point3D(1, 1, 0))\n    const three = kochEdge(level, z)\n    three.translate(new Point3D(1, 0, 0))\n    three.rotateXY(120)\n    three.translate(new Point3D(0, Math.sqrt(3) * -5 / 12, 0))\n\n    const koch = ListOfPoint3D.concatenate(one, two, three)\n\n    return koch\n\n}\n\nexport function GenerateSierpiński(level: number, z: number) {\n\n    if (level === 1) {\n        return new ListOfPoint3D([\n            new Point3D(-1, -1, z),\n            new Point3D(0, Math.sqrt(3) - 1, z),\n            new Point3D(1, -1, z),\n        ])\n    } else {\n        const one = GenerateSierpiński(level - 1, z)\n        one.translate(new Point3D(-1, -1, 0))\n        one.scale(0.5)\n        const two = GenerateSierpiński(level - 1, z)\n        two.translate(new Point3D(1, 1, 0))\n        two.scale(0.5)\n        two.translate(new Point3D(\n            -0.5,\n            -1 + 0.5 * Math.sqrt(3),\n            0\n        ))\n        const three = GenerateSierpiński(level - 1, z)\n        three.translate(new Point3D(1, 1, 0))\n        three.scale(0.5)\n        three.translate(new Point3D(\n            0,\n            -1,\n            0\n        ))\n\n        const vertices = ListOfPoint3D.concatenate(one, two, three)\n\n        return vertices\n    }\n\n}\n","import { Point3D } from '../types'\nimport { MyCanvas, Shape } from './canvas'\nimport { GenerateKoch, GenerateSierpiński } from './fractal-generator'\n\nconst canvasElement: HTMLCanvasElement = document.querySelector('canvas')\nconst formElement: HTMLFormElement = document.querySelector('form')\nconst fractalSelectElement: HTMLSelectElement = document.querySelector('select')\nconst colourInputElement: HTMLInputElement = document.querySelector('#colour-input')\nconst fractalLevelInputElement: HTMLInputElement = document.querySelector('#level-input')\n\nconst myCanvas = new MyCanvas(canvasElement)\n\nmyCanvas.startAnimationLoop()\n\nformElement.onsubmit = (event) => {\n\n    event.preventDefault()\n\n    const chosenFractal = fractalSelectElement.value\n    const fractalLevel = parseInt(fractalLevelInputElement.value)\n    const colour = colourInputElement.value\n        .replace(/\\s+/g, '')\n        .split(',')\n        .map((raw) => parseFloat(raw))\n\n    if (colour.length !== 3) {\n        alert('please provide a valid RGB colour tuple')\n        return\n    }\n\n    for (const c of colour) {\n        if (isNaN(c)) {\n            alert('please provide a valid RGB colour tuple')\n            return\n        }\n    }\n\n    if (isNaN(fractalLevel) || fractalLevel < 1) {\n        alert('please provide fractal level that is an integer number greater than 0')\n        return\n    }\n\n    let fractal: Shape\n    if (chosenFractal === 'Koch') {\n        fractal = {\n            colour,\n            drawType: myCanvas.DrawTypes.LINE_LOOP,\n            points: GenerateKoch(fractalLevel, 0)\n        }\n    } else {\n        fractal = {\n            colour,\n            drawType: myCanvas.DrawTypes.TRIANGLES,\n            points: GenerateSierpiński(fractalLevel, 0)\n        }\n    }\n\n    fractal.points.scale(0.5)\n\n    myCanvas.addShape(fractal)\n\n}\n\nwindow.addEventListener('keydown', (event) => {\n\n    const shape = myCanvas.lastAddedShape\n\n    if (!shape) return\n\n    switch (event.key) {\n        case 'J':\n            shape.points.translate(new Point3D(\n                0,\n                0,\n                -0.1\n            ))\n            break\n        case 'j':\n            shape.points.translate(new Point3D(\n                0,\n                -0.1,\n                0\n            ))\n            break\n        case 'K':\n            shape.points.translate(new Point3D(\n                0,\n                0,\n                0.1\n            ))\n            break\n        case 'k':\n            shape.points.translate(new Point3D(\n                0,\n                0.1,\n                0\n            ))\n            break\n        case 'h':\n            shape.points.translate(new Point3D(\n                -0.1,\n                0,\n                0\n            ))\n            break\n        case 'l':\n            shape.points.translate(new Point3D(\n                0.1,\n                0,\n                0\n            ))\n            break\n    }\n\n})\n","import { ListOfPoint3D } from '../types';\nimport { vertexShaderRaw, fragmentShaderRaw } from './shaders'\n\nexport type Colour = number[];\n\nexport interface Shape {\n    points: ListOfPoint3D\n    drawType: number\n    colour: Colour\n}\n\nexport class MyCanvas {\n\n    /**\n     * WebGL context.\n     */\n    private gl: WebGLRenderingContext\n\n    private program: WebGLProgram\n\n    /**\n     * List of all shapes the user wants to draw.\n     */\n    private shapes: Shape[] = []\n    public addShape(newShape: Shape) {\n        this.shapes.push(newShape)\n    }\n    public get lastAddedShape() {\n        if(this.shapes.length > 0)\n        return this.shapes[this.shapes.length - 1]\n        else return null\n    }\n\n    public readonly DrawTypes: {\n        POINTS: number,\n        LINES: number,\n        LINE_STRIP: number,\n        LINE_LOOP: number,\n        TRIANGLES: number,\n        TRIANGLE_STRIP: number,\n        TRIANGLE_FAN: number,\n    }\n\n    constructor(private canvas: HTMLCanvasElement) {\n        this.gl = this.canvas.getContext('webgl')\n\n        if (!this.gl) {\n            this.gl = this.canvas.getContext('experimental-webgl') as WebGLRenderingContext\n        }\n\n        if (!this.gl) {\n            throw new Error('WebGL not supported')\n        }\n\n        // initialize pseudo-enum containing types of primitive shapes\n        this.DrawTypes = {\n            POINTS: this.gl.POINTS,\n            LINES: this.gl.LINES,\n            LINE_STRIP: this.gl.LINE_STRIP,\n            LINE_LOOP: this.gl.LINE_LOOP,\n            TRIANGLES: this.gl.TRIANGLES,\n            TRIANGLE_STRIP: this.gl.TRIANGLE_STRIP,\n            TRIANGLE_FAN: this.gl.TRIANGLE_FAN,\n        }\n\n        this.clearScreen()\n        this.prepare()\n\n        this.gl.lineWidth(4)\n\n        // enable depth\n        this.gl.enable(this.gl.DEPTH_TEST)\n    }\n\n    private prepare() {\n        const gl = this.gl;\n        const vertexShader = this.prepareShader(vertexShaderRaw.source, gl.VERTEX_SHADER)\n        const fragmentShader = this.prepareShader(fragmentShaderRaw.source, gl.FRAGMENT_SHADER)\n\n        this.program = this.prepareProgram([vertexShader, fragmentShader])\n    }\n\n    /**\n     * Wipe the whole screen clean.\n     */\n    private clearScreen() {\n        this.gl.clearColor(0, 0, 0, 1)\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT)\n    }\n\n    private prepareShader(source: string, shaderType: number) {\n        const gl = this.gl\n\n        const shader = gl.createShader(shaderType)\n\n        gl.shaderSource(shader, source)\n        gl.compileShader(shader)\n\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            throw new Error('Shader compilation error: ' + this.gl.getShaderInfoLog(shader))\n        }\n\n        return shader;\n    }\n\n    private prepareProgram(shaders: WebGLShader[]) {\n        const gl = this.gl;\n\n        const program = gl.createProgram()\n        shaders.forEach((shader) => {\n            gl.attachShader(program, shader)\n        });\n\n        gl.linkProgram(program)\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            throw new Error('Program linking error: ' + this.gl.getProgramInfoLog(program))\n        }\n\n        gl.validateProgram(program)\n        if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\n            throw new Error('Program validating error: ' + gl.getProgramInfoLog(program))\n        }\n\n        return program;\n    }\n\n    public startAnimationLoop() {\n\n        this.clearScreen()\n\n        this.shapes.forEach((shape) => {\n            this.draw3DUniformColor(shape.points, shape.drawType, shape.colour)\n        })\n\n        window.requestAnimationFrame(this.startAnimationLoop.bind(this))\n    }\n\n    private draw3DUniformColor(vertices: ListOfPoint3D, drawType: number, colour: Colour) {\n        const gl = this.gl\n\n        const vertexBuffer = gl.createBuffer()\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices.flatList), gl.STATIC_DRAW)\n\n        const positionAttribLocation = gl.getAttribLocation(this.program, vertexShaderRaw.attributes.vertPosition)\n\n        gl.enableVertexAttribArray(positionAttribLocation)\n        gl.vertexAttribPointer(\n            positionAttribLocation, // the vertex position attrib\n            3, // 3D\n            gl.FLOAT,\n            false,\n            3 * Float32Array.BYTES_PER_ELEMENT,\n            0 // offset equal to zero, because we’re not expecting any additional information in the given array\n        )\n\n        gl.useProgram(this.program)\n        const colourUniformLocation = gl.getUniformLocation(this.program, fragmentShaderRaw.uniforms.colour)\n        gl.uniform3fv(colourUniformLocation, new Float32Array(colour))\n\n        gl.drawArrays(drawType, 0, vertices.length)\n    }\n\n}\n"],"names":["$4637b441e76e2d234d42edafff295e88$export$Point3D","constructor","x","y","z","p","reset","this","negate","translate","vector","translateY","value","scale","factor","rotateXY","angle","sin","Math","PI","cos","newX","newY","$4637b441e76e2d234d42edafff295e88$export$ListOfPoint3D","Array","points","super","list","concat","flat","forEach","vertex","push","origin","from","$1c37c7ac488555f537b1906d7392cc9f$export$vertexShaderRaw","source","attributes","vertPosition","$1c37c7ac488555f537b1906d7392cc9f$export$fragmentShaderRaw","uniforms","colour","$4cc9df14a1d3c76521e3f51e6c1b13f6$var$kochEdge","level","sqrt","first","second","third","fourth","concatenate","$4cc9df14a1d3c76521e3f51e6c1b13f6$export$GenerateKoch","one","two","three","koch","$4cc9df14a1d3c76521e3f51e6c1b13f6$export$GenerateSierpiński","vertices","$bd97b06a01ea85e363bd5a1bd4fc79fc$var$canvasElement","document","querySelector","$bd97b06a01ea85e363bd5a1bd4fc79fc$var$formElement","$bd97b06a01ea85e363bd5a1bd4fc79fc$var$fractalSelectElement","$bd97b06a01ea85e363bd5a1bd4fc79fc$var$colourInputElement","$bd97b06a01ea85e363bd5a1bd4fc79fc$var$fractalLevelInputElement","$bd97b06a01ea85e363bd5a1bd4fc79fc$var$myCanvas","shapes","addShape","newShape","length","canvas","gl","getContext","Error","DrawTypes","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","clearScreen","prepare","lineWidth","enable","DEPTH_TEST","vertexShader","prepareShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","prepareProgram","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","shaderType","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","shaders","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","startAnimationLoop","shape","draw3DUniformColor","drawType","window","requestAnimationFrame","bind","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","flatList","STATIC_DRAW","positionAttribLocation","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","useProgram","colourUniformLocation","getUniformLocation","uniform3fv","drawArrays","onsubmit","event","preventDefault","chosenFractal","fractalLevel","parseInt","replace","split","map","raw","parseFloat","alert","c","isNaN","fractal","addEventListener","lastAddedShape","key"],"version":3,"file":"index.f5c51071.js.map"}