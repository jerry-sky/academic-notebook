{"mappings":"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","sources":["./ex-1/shaders.ts","./ex-1/main.ts","./ex-1/canvas.ts"],"sourcesContent":["\nexport const vertexShaderRaw = {\n    source: `\nprecision mediump float;\n\nattribute vec2 vertPosition;\n// attribute vec3 vertColor;\n// uniform vec3 fragColor;\n\nvoid main()\n{\n    // fragColor = vertColor;\n    gl_Position = vec4(vertPosition, 0.0, 1.0);\n    gl_PointSize = 10.0;\n}\n`,\n    attributes: {\n        vertPosition: 'vertPosition',\n    },\n}\n\nexport const fragmentShaderRaw = {\n    source: `\nprecision mediump float;\n\nuniform vec3 fragColor;\n\nvoid main()\n{\n    gl_FragColor = vec4(fragColor, 1.0);\n}\n`,\n    attributes: {},\n    uniforms: {\n        colour: 'fragColor',\n    },\n}\n","import { MyCanvas } from './canvas'\n\nconst canvasElement: HTMLCanvasElement = document.querySelector('canvas')\nconst inputElement: HTMLTextAreaElement = document.querySelector('textarea')\nconst selectElement: HTMLSelectElement = document.querySelector('select')\nconst formElement: HTMLFormElement = document.querySelector('form')\n\nconst vertexGenericLocationIndex = 10\n\nconsole.log('Initializing a new canvas. Setting the attrib location to', vertexGenericLocationIndex)\nconst myCanvas = new MyCanvas(canvasElement, vertexGenericLocationIndex)\nconsole.log('Initialized. Attrib location:')\nmyCanvas.printAttribLocation()\n\nconsole.log('All active attributes:')\nmyCanvas.printAllActiveAttributes()\nconsole.log('All active uniforms:')\nmyCanvas.printAllActiveUniforms()\n\nformElement.onsubmit = (event) => {\n\n    event.preventDefault()\n\n    const drawType = myCanvas.DrawTypes[selectElement.value] as number\n\n    const verticesRaw = inputElement.value.replace(/\\s+/g, '')\n    const vertices: number[] = []\n    verticesRaw.split(',').forEach((vertexRaw) => {\n        const parsed = parseFloat(vertexRaw)\n        if (!isNaN(parsed)) {\n            vertices.push(parsed)\n        }\n    })\n\n    myCanvas.draw2DUniformColor(vertices, drawType, [1, 0, 1])\n\n}\n","import { vertexShaderRaw, fragmentShaderRaw } from './shaders'\n\nexport type Colour = number[];\n\nexport class MyCanvas {\n\n    /**\n     * WebGL context.\n     */\n    private gl: WebGLRenderingContext\n\n    private program: WebGLProgram\n\n    public readonly DrawTypes: {\n        POINTS: number,\n        LINES: number,\n        LINE_STRIP: number,\n        LINE_LOOP: number,\n        TRIANGLES: number,\n        TRIANGLE_STRIP: number,\n        TRIANGLE_FAN: number,\n    }\n\n    constructor(private canvas: HTMLCanvasElement, private vertexGenericLocationIndex = 3) {\n        this.gl = this.canvas.getContext('webgl')\n\n        if (!this.gl) {\n            this.gl = this.canvas.getContext('experimental-webgl') as WebGLRenderingContext\n        }\n\n        if (!this.gl) {\n            throw new Error('WebGL not supported')\n        }\n\n        // initialize pseudo-enum containing types of primitive shapes\n        this.DrawTypes = {\n            POINTS: this.gl.POINTS,\n            LINES: this.gl.LINES,\n            LINE_STRIP: this.gl.LINE_STRIP,\n            LINE_LOOP: this.gl.LINE_LOOP,\n            TRIANGLES: this.gl.TRIANGLES,\n            TRIANGLE_STRIP: this.gl.TRIANGLE_STRIP,\n            TRIANGLE_FAN: this.gl.TRIANGLE_FAN,\n        }\n\n        this.clearScreen()\n        this.prepare()\n    }\n\n    private prepare() {\n        const gl = this.gl;\n        const vertexShader = this.prepareShader(vertexShaderRaw.source, gl.VERTEX_SHADER)\n        const fragmentShader = this.prepareShader(fragmentShaderRaw.source, gl.FRAGMENT_SHADER)\n\n        this.program = this.prepareProgram([vertexShader, fragmentShader])\n    }\n\n    /**\n     * Wipe the whole screen clean.\n     */\n    private clearScreen() {\n        this.gl.clearColor(0, 0, 0, 1)\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT)\n    }\n\n    private prepareShader(source: string, shaderType: number) {\n        const gl = this.gl\n\n        const shader = gl.createShader(shaderType)\n\n        gl.shaderSource(shader, source)\n        gl.compileShader(shader)\n\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            throw new Error('Shader compilation error: ' + this.gl.getShaderInfoLog(shader))\n        }\n\n        return shader;\n    }\n\n    private prepareProgram(shaders: WebGLShader[]) {\n        const gl = this.gl;\n\n        const program = gl.createProgram()\n        shaders.forEach((shader) => {\n            gl.attachShader(program, shader)\n        });\n\n        gl.bindAttribLocation(program, this.vertexGenericLocationIndex, vertexShaderRaw.attributes.vertPosition)\n\n        gl.linkProgram(program)\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            throw new Error('Program linking error: ' + this.gl.getProgramInfoLog(program))\n        }\n\n        gl.validateProgram(program)\n        if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\n            throw new Error('Program validating error: ' + gl.getProgramInfoLog(program))\n        }\n\n        return program;\n    }\n\n    public printAllActiveAttributes() {\n        const gl = this.gl\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let i = 0; i < numAttribs; ++i) {\n            const info = gl.getActiveAttrib(this.program, i);\n            console.log('name:', info.name, 'type:', info.type, 'size:', info.size);\n        }\n    }\n\n    public printAllActiveUniforms() {\n        const gl = this.gl\n        const numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let i = 0; i < numUniforms; ++i) {\n            const info = gl.getActiveUniform(this.program, i);\n            console.log('name:', info.name, 'type:', info.type, 'size:', info.size);\n        }\n    }\n\n    public printAttribLocation() {\n        console.log(\n            this.gl.getAttribLocation(\n                this.program,\n                vertexShaderRaw.attributes.vertPosition\n            )\n        )\n    }\n\n    public draw2DUniformColor(vertices: number[], drawType: number, colour: Colour) {\n        const gl = this.gl\n\n        this.clearScreen()\n\n        const verticesCount = vertices.length / 2;\n\n        // the array must be dividable by five\n        // every vertex is expected to have two coordinate parameters\n        // and three colour parameters\n        if (verticesCount !== Math.floor(vertices.length / 2)) {\n            throw new Error('Invalid number of verticesâ€™ parameters')\n        }\n\n        const vertexBuffer = gl.createBuffer()\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\n\n        const positionAttribLocation = gl.getAttribLocation(this.program, vertexShaderRaw.attributes.vertPosition)\n\n        gl.vertexAttribPointer(\n            positionAttribLocation, // the vertex position attrib\n            2, // 2D\n            gl.FLOAT,\n            false,\n            2 * Float32Array.BYTES_PER_ELEMENT,\n            0 // offset equal to zero, because weâ€™re not expecting any additional information in the given array\n        )\n        gl.enableVertexAttribArray(positionAttribLocation)\n\n        gl.useProgram(this.program)\n        const colourUniformLocation = gl.getUniformLocation(this.program, fragmentShaderRaw.uniforms.colour)\n        gl.uniform3fv(colourUniformLocation, new Float32Array(colour))\n\n        gl.drawArrays(drawType, 0, verticesCount)\n    }\n\n}\n"],"names":["$ad98c55d5ebd055f3b0b2f4f4c85ddd5$export$vertexShaderRaw","source","attributes","vertPosition","$ad98c55d5ebd055f3b0b2f4f4c85ddd5$export$fragmentShaderRaw","uniforms","colour","$e5072cde508d2277819785c6082034d9$var$canvasElement","document","querySelector","$e5072cde508d2277819785c6082034d9$var$inputElement","$e5072cde508d2277819785c6082034d9$var$selectElement","$e5072cde508d2277819785c6082034d9$var$formElement","console","log","$e5072cde508d2277819785c6082034d9$var$myCanvas","constructor","canvas","vertexGenericLocationIndex","this","gl","getContext","Error","DrawTypes","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","clearScreen","prepare","vertexShader","prepareShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","prepareProgram","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","shaderType","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","shaders","createProgram","forEach","attachShader","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","printAllActiveAttributes","numAttribs","ACTIVE_ATTRIBUTES","i","info","getActiveAttrib","name","type","size","printAllActiveUniforms","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","printAttribLocation","getAttribLocation","draw2DUniformColor","vertices","drawType","verticesCount","length","Math","floor","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","positionAttribLocation","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","enableVertexAttribArray","useProgram","colourUniformLocation","getUniformLocation","uniform3fv","drawArrays","onsubmit","event","preventDefault","value","verticesRaw","replace","split","vertexRaw","parsed","parseFloat","isNaN","push"],"version":3,"file":"index.c63bf677.js.map"}