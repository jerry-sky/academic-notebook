!function(){const r={source:"\nprecision mediump float;\n\nattribute vec2 vertPosition;\n// attribute vec3 vertColor;\n// uniform vec3 fragColor;\n\nvoid main()\n{\n    // fragColor = vertColor;\n    gl_Position = vec4(vertPosition, 0.0, 1.0);\n    gl_PointSize = 10.0;\n}\n",attributes:{vertPosition:"vertPosition"}},t={source:"\nprecision mediump float;\n\nuniform vec3 fragColor;\n\nvoid main()\n{\n    gl_FragColor = vec4(fragColor, 1.0);\n}\n",attributes:{},uniforms:{colour:"fragColor"}};const e=document.querySelector("canvas"),o=document.querySelector("textarea"),i=document.querySelector("select"),n=document.querySelector("form");console.log("Initializing a new canvas. Setting the attrib location to",10);const a=new class{constructor(r,t=3){if(this.canvas=r,this.vertexGenericLocationIndex=t,this.gl=this.canvas.getContext("webgl"),this.gl||(this.gl=this.canvas.getContext("experimental-webgl")),!this.gl)throw new Error("WebGL not supported");this.DrawTypes={POINTS:this.gl.POINTS,LINES:this.gl.LINES,LINE_STRIP:this.gl.LINE_STRIP,LINE_LOOP:this.gl.LINE_LOOP,TRIANGLES:this.gl.TRIANGLES,TRIANGLE_STRIP:this.gl.TRIANGLE_STRIP,TRIANGLE_FAN:this.gl.TRIANGLE_FAN},this.clearScreen(),this.prepare()}prepare(){const e=this.gl,o=this.prepareShader(r.source,e.VERTEX_SHADER),i=this.prepareShader(t.source,e.FRAGMENT_SHADER);this.program=this.prepareProgram([o,i])}clearScreen(){this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT)}prepareShader(r,t){const e=this.gl,o=e.createShader(t);if(e.shaderSource(o,r),e.compileShader(o),!this.gl.getShaderParameter(o,this.gl.COMPILE_STATUS))throw new Error("Shader compilation error: "+this.gl.getShaderInfoLog(o));return o}prepareProgram(t){const e=this.gl,o=e.createProgram();if(t.forEach((r=>{e.attachShader(o,r)})),e.bindAttribLocation(o,this.vertexGenericLocationIndex,r.attributes.vertPosition),e.linkProgram(o),!e.getProgramParameter(o,e.LINK_STATUS))throw new Error("Program linking error: "+this.gl.getProgramInfoLog(o));if(e.validateProgram(o),!e.getProgramParameter(o,e.VALIDATE_STATUS))throw new Error("Program validating error: "+e.getProgramInfoLog(o));return o}printAllActiveAttributes(){const r=this.gl,t=r.getProgramParameter(this.program,r.ACTIVE_ATTRIBUTES);for(let e=0;e<t;++e){const t=r.getActiveAttrib(this.program,e);console.log("name:",t.name,"type:",t.type,"size:",t.size)}}printAllActiveUniforms(){const r=this.gl,t=r.getProgramParameter(this.program,r.ACTIVE_UNIFORMS);for(let e=0;e<t;++e){const t=r.getActiveUniform(this.program,e);console.log("name:",t.name,"type:",t.type,"size:",t.size)}}printAttribLocation(){console.log(this.gl.getAttribLocation(this.program,r.attributes.vertPosition))}draw2DUniformColor(e,o,i){const n=this.gl;this.clearScreen();const a=e.length/2;if(a!==Math.floor(e.length/2))throw new Error("Invalid number of verticesâ€™ parameters");const s=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,new Float32Array(e),n.STATIC_DRAW);const l=n.getAttribLocation(this.program,r.attributes.vertPosition);n.vertexAttribPointer(l,2,n.FLOAT,!1,2*Float32Array.BYTES_PER_ELEMENT,0),n.enableVertexAttribArray(l),n.useProgram(this.program);const c=n.getUniformLocation(this.program,t.uniforms.colour);n.uniform3fv(c,new Float32Array(i)),n.drawArrays(o,0,a)}}(e,10);console.log("Initialized. Attrib location:"),a.printAttribLocation(),console.log("All active attributes:"),a.printAllActiveAttributes(),console.log("All active uniforms:"),a.printAllActiveUniforms(),n.onsubmit=r=>{r.preventDefault();const t=a.DrawTypes[i.value],e=o.value.replace(/\s+/g,""),n=[];e.split(",").forEach((r=>{const t=parseFloat(r);isNaN(t)||n.push(t)})),a.draw2DUniformColor(n,t,[1,0,1])}}();
//# sourceMappingURL=index.c63bf677.js.map
