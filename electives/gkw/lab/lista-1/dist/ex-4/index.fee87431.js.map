{"mappings":"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","sources":["./types.ts","./ex-4/main.ts","./ex-4/my-canvas.ts"],"sourcesContent":["\n/**\n * Simple class that holds two values: `x` and `y`.\n */\nexport class Point2D {\n\n    constructor(\n        public x: number,\n        public y: number\n    ) { }\n\n}\n\nexport class Point3D extends Point2D {\n\n    constructor(\n        public x: number,\n        public y: number,\n        public z: number\n    ) {\n        super(x, y)\n    }\n\n}\n\nexport class Line3D {\n\n    constructor(\n        public begin: Point3D,\n        public end: Point3D\n    ) { }\n\n}\n\nexport class Cuboid {\n\n    private _lines: Line3D[]\n    private _vertices: Point3D[]\n\n    private middle: Point3D\n\n    private maxPoints: Point3D[]\n\n    constructor(\n        x: number,\n        y: number,\n        z: number,\n        width: number,\n        height: number,\n        depth: number\n    ) {\n        this.middle = new Point3D(x, y, z)\n        // prepare all the cuboid vertices\n        const v = [\n            new Point3D(x - width / 2, y - height / 2, z - depth / 2),\n            new Point3D(x - width / 2, y + height / 2, z - depth / 2),\n            new Point3D(x + width / 2, y + height / 2, z - depth / 2),\n            new Point3D(x + width / 2, y - height / 2, z - depth / 2),\n            new Point3D(x - width / 2, y - height / 2, z + depth / 2),\n            new Point3D(x - width / 2, y + height / 2, z + depth / 2),\n            new Point3D(x + width / 2, y + height / 2, z + depth / 2),\n            new Point3D(x + width / 2, y - height / 2, z + depth / 2),\n        ]\n        this._lines = [\n            // “lower” rectangle\n            new Line3D(v[0], v[1]),\n            new Line3D(v[1], v[2]),\n            new Line3D(v[2], v[3]),\n            new Line3D(v[3], v[0]),\n            // “connecting” lines between the “lower” and “upper” rectangles\n            new Line3D(v[0], v[4]),\n            new Line3D(v[1], v[5]),\n            new Line3D(v[2], v[6]),\n            new Line3D(v[3], v[7]),\n            // “upper” rectangle\n            new Line3D(v[4], v[5]),\n            new Line3D(v[5], v[6]),\n            new Line3D(v[6], v[7]),\n            new Line3D(v[7], v[4])\n        ]\n        this._vertices = v\n        // save the vertices that help in determining if given point is inside the cuboid\n        this.maxPoints = [\n            v[0],\n            v[6]\n        ]\n    }\n\n    public get lines() {\n        return this._lines\n    }\n\n    public get vertices() {\n        return this._vertices\n    }\n\n    public isInside(point: Point3D) {\n        const x = point.x\n        const y = point.y\n        const z = point.z\n        const one = this.maxPoints[0]\n        const two = this.maxPoints[1]\n        if (\n            x >= one.x && x <= two.x\n            && y >= one.y && y <= two.y\n            && z >= one.z && z <= two.z\n        ) {\n            return true\n        }\n        return false\n    }\n\n    public rotateX(radian: number) {\n\n        const cos = Math.cos(radian)\n        const sin = Math.sin(radian)\n\n        this.vertices.forEach((p) => {\n            const y = (p.y - this.middle.y) * cos - (p.z - this.middle.z) * sin\n            const z = (p.y - this.middle.y) * sin + (p.z - this.middle.z) * cos\n\n            p.y = y + this.middle.y\n            p.z = z + this.middle.z\n        })\n    }\n\n    public rotateY(radian: number) {\n\n        const cos = Math.cos(radian)\n        const sin = Math.sin(radian)\n\n        this.vertices.forEach((p) => {\n            const x = (p.z - this.middle.z) * sin - (p.x - this.middle.x) * cos\n            const z = (p.z - this.middle.z) * cos + (p.x - this.middle.x) * sin\n\n            p.x = x + this.middle.x\n            p.z = z + this.middle.z\n        })\n    }\n\n}\n\nexport class Projector {\n\n    public static FocalLength = 100\n\n    public static Project3DInto2D(point: Point3D, width: number, height: number): Point2D {\n        const x = point.x * (Projector.FocalLength / point.z) + 0.5 * width;\n        const y = point.y * (Projector.FocalLength / point.z) + 0.5 * height;\n\n        return new Point2D(x, y)\n    }\n\n}\n\n","import { Cuboid, Point3D } from '../types'\nimport { MyCanvas } from './my-canvas'\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\n\nconst myCanvas = new MyCanvas(canvas)\n\nfunction getRandomInt(max: number) {\n    return Math.floor(Math.random() * max)\n}\n\n// generate the cuboids\nconst cuboidCount = 30\nconst z = -150\nconst width = 50\nconst height = 50\nconst depth = 25\nfor (let i = 0; i < cuboidCount; i++) {\n\n    const x = getRandomInt(myCanvas.width) - myCanvas.width / 2\n    const y = getRandomInt(myCanvas.height) - myCanvas.height / 2\n\n    const cuboid = new Cuboid(\n        x, y, z,\n        width, height, depth\n    )\n\n    myCanvas.cuboids.push(cuboid)\n\n}\n\nmyCanvas.resetPlayer(new Point3D(\n    0,\n    -myCanvas.height/2,\n    z\n))\n\nmyCanvas.targetCuboid = new Cuboid(\n    0, myCanvas.height/2, z,\n    width, height, depth * .3\n)\n\ndocument.addEventListener('keydown', (event: KeyboardEvent) => {\n\n    switch(event.key) {\n        case 'ArrowUp':\n            myCanvas.movePlayer(0, 10)\n            break\n        case 'ArrowDown':\n            myCanvas.movePlayer(0, -10)\n            break\n        case 'ArrowLeft':\n            myCanvas.movePlayer(10, 0)\n            break\n        case 'ArrowRight':\n            myCanvas.movePlayer(-10, 0)\n            break\n    }\n\n    myCanvas.redraw()\n\n    if(myCanvas.checkIfPlayerWon()) {\n        alert('You’ve won!')\n        location.reload()\n    }\n\n})\n\nmyCanvas.redraw()\n","import { Cuboid, Point3D, Projector } from '../types';\n\nexport class MyCanvas {\n\n    /**\n     * Player’s current position.\n     */\n    private _currentPos: Point3D;\n\n    private _width: number;\n    private _height: number;\n\n    private context: CanvasRenderingContext2D;\n\n    public cuboids: Cuboid[] = [];\n\n    public targetCuboid: Cuboid\n\n    constructor(\n        canvasElement: HTMLCanvasElement\n    ) {\n        this._width = canvasElement.width\n        this._height = canvasElement.height\n\n        this.context = canvasElement.getContext('2d')!;\n\n        this.reset()\n\n        this.context.lineWidth = 5;\n    }\n\n    public get width() {\n        return this._width\n    }\n\n    public get height() {\n        return this._height\n    }\n\n    /**\n     * Set stroke colour to the primary colour.\n     */\n    private setToPrimaryColour() {\n        this.context.strokeStyle = \"#000000\";\n    }\n\n    /**\n     * Set stroke colour to the secondary colour.\n     */\n    private setToSecondaryColour() {\n        this.context.strokeStyle = \"#ff00ff\";\n    }\n\n    public redraw() {\n\n        const c = this.context;\n\n        // clear the canvas\n        c.clearRect(0, 0, this._width, this._height);\n\n        // draw all the cuboids\n        this.setToPrimaryColour();\n        this.cuboids.forEach((cuboid) => {\n            cuboid.lines.forEach((line) => {\n                const begin = Projector.Project3DInto2D(line.begin, this._width, this._height)\n                const end = Projector.Project3DInto2D(line.end, this._width, this._height)\n                c.beginPath()\n                c.moveTo(begin.x, begin.y)\n                c.lineTo(end.x, end.y)\n                c.closePath()\n                c.stroke();\n            })\n        })\n\n        if (this.targetCuboid) {\n            // draw the target cuboid\n            this.setToSecondaryColour()\n            this.targetCuboid.lines.forEach((line) => {\n                const begin = Projector.Project3DInto2D(line.begin, this._width, this._height)\n                const end = Projector.Project3DInto2D(line.end, this._width, this._height)\n                c.beginPath()\n                c.moveTo(begin.x, begin.y)\n                c.lineTo(end.x, end.y)\n                c.closePath()\n                c.stroke();\n            })\n        }\n\n        // draw the player\n        const cur = Projector.Project3DInto2D(this._currentPos, this._width, this._height)\n        this.setToSecondaryColour()\n        c.beginPath()\n        this.context.arc(\n            cur.x, cur.y,\n            10,\n            0, 2 * Math.PI\n        )\n        c.stroke()\n        c.closePath()\n\n    }\n\n    public get currentPos() {\n        return this._currentPos;\n    }\n\n    public reset() {\n        this._currentPos = new Point3D(0, 0, 0)\n        this.cuboids = []\n        this.redraw()\n    }\n\n    public resetPlayer(point: Point3D) {\n        this._currentPos = point\n    }\n\n    public checkIfPlayerWon() {\n\n        if(this.targetCuboid && this.targetCuboid.isInside(this._currentPos)) {\n            return true\n        }\n        return false\n\n    }\n\n    public movePlayer(x: number, y: number) {\n        this._currentPos.x += x\n        this._currentPos.y += y\n        // check if the player hit a wall\n        for (let i = 0; i < this.cuboids.length; i++) {\n            const cuboid = this.cuboids[i]\n            if (cuboid.isInside(this._currentPos)) {\n                // player has hit the wall\n                this._currentPos.x -= x\n                this._currentPos.y -= y\n                return\n            }\n        }\n    }\n\n}\n"],"names":["$4637b441e76e2d234d42edafff295e88$export$Point2D","constructor","x","y","$4637b441e76e2d234d42edafff295e88$export$Point3D","z","super","$4637b441e76e2d234d42edafff295e88$export$Line3D","begin","end","$4637b441e76e2d234d42edafff295e88$export$Cuboid","width","height","depth","this","middle","v","_lines","_vertices","maxPoints","isInside","point","one","two","rotateX","radian","cos","Math","sin","vertices","forEach","p","rotateY","$4637b441e76e2d234d42edafff295e88$export$Projector","FocalLength","$053b22ded444fc1ca88f343d88abc16a$var$canvas","document","getElementById","$053b22ded444fc1ca88f343d88abc16a$var$myCanvas","cuboids","canvasElement","_width","_height","context","getContext","reset","lineWidth","setToPrimaryColour","strokeStyle","setToSecondaryColour","redraw","c","clearRect","cuboid","lines","line","Project3DInto2D","beginPath","moveTo","lineTo","closePath","stroke","targetCuboid","cur","_currentPos","arc","PI","resetPlayer","checkIfPlayerWon","movePlayer","i","length","$053b22ded444fc1ca88f343d88abc16a$var$getRandomInt","max","floor","random","$053b22ded444fc1ca88f343d88abc16a$var$z","push","$053b22ded444fc1ca88f343d88abc16a$var$depth","addEventListener","event","key","alert","location","reload"],"version":3,"file":"index.fee87431.js.map"}